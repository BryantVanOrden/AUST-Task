{"timestamp":"2025-09-17T06:12:28.874437","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-17T06:12:28.874781","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/moodle_ldap_sync_and_transform_generic.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-17T06:12:28.933194Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:28.933441Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:28.934131Z","level":"info","event":"Current task name:transform_ldap_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:28.934407Z","level":"info","event":"Dag name:moodle_ldap_dynamic_etl_v2","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:28.934592Z","level":"info","event":"--- Starting LDAP Data Transformation ---","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:28.935080","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-17T06:12:28.940651","level":"warning","event":"Skipping masking for a secret as it's too short (<5 chars)","logger":"airflow.sdk.execution_time.secrets_masker"}
{"timestamp":"2025-09-17T06:12:28.940736","level":"info","event":"Connection Retrieved 'mysql_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-17T06:12:28.951157","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:479: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-09-17T06:12:29.011827Z","level":"info","event":"--- LDAP Transformation Complete: Wrote 11 records. ---","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:29.012212","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-09-17T06:12:29.022245Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:29.022434Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-17T06:12:29.022634Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): transform_ldap_data>","chan":"stdout","logger":"task"}
